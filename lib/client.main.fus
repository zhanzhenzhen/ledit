fus 0.7.0

import "babel-polyfill"
client: import "site/client"
ui: client.ui
web: npmMate.web

global.editor: null
global.fusApi: require("futurescript/es5-target/locked-api")

currentDirectory: null
currentFilePath: null
dirty: false

extname: filename ->
    pos: filename.lastIndexOf(".")
    if pos = -1 or pos = 0
        ""
    else
        filename.substr(pos)

# Do not need to encode all special chars, for better look.
encodePath: path ->
    path.replace(r"%"g, "%25")

trimTrailingSpaces: code ->
    code.split("\n").map(m ->
        m.match(r"^(.*?)[ \t]*$").1
    ).join("\n")

newSession: (text, mode) ->
    dirty: false
    oldSession: editor.getSession()
    session: ace.EditSession(text, "ace/mode/\(mode)")
    session.setNewLineMode("unix")
    session.on("change", e ->
        dirty: true
        if mode = "fus"
            session.resetCaches()
    )
    session.setUndoManager ace.UndoManager()
    editor.setSession session
    oldSession.getUndoManager().reset()
    oldSession.destroy()

newScene: ui.Stack(
    {
        horizontal: true
    },
    ui.Stack(
        {
            width: 0.2
            padding: "1rem"
            childSpacing: "1rem"
        },
        ui.Button("New Tab").setWidth(1) as newTabButton,
        ui.Text("/", {lineHeight: 1.3}) as dirText,
        ui.Text("(no file)") as fileText,
        ui.Stack(
            {
                childSpacing: "1rem"
                horizontal: true
                height: "auto"
                padding: ui.Padding("0rem", "0rem", "0rem", "1rem")
            },
            ui.Button("Up").setWidth(1) as upButton,
            ui.Button("Save").setWidth(1) as saveButton
        ),
        ui.Stack{
            childSpacing: "0.5rem"
            overflow: "scroll"
        } as filesStack
    ) as leftStack,
    ui.Element(
        {
            width: 0.8
            height: 1
            selectable: true
            pointer: "auto"
        },
        "
            <div id="editor" style="width: 100%; height: 100%;" />
        "
    ) as editorElement
)

dirText.raw.style.wordWrap: "break-word"
newTabButton.raw.style.borderColor: "rgb(240,240,240)"
upButton.raw.style.borderColor: "rgb(240,240,240)"
saveButton.raw.style.borderColor: "rgb(240,240,240)"
newTabButton.onClick <>
    open "/#\(encodePath(currentDirectory))"
upButton.onClick <>
    newSession("", "plain_text")
    if currentDirectory ≠ "/"
        pos: currentDirectory.lastIndexOf("/")
        showFiles(pos = 0 ? "/" | currentDirectory.substr(0, pos))
saveButton.onClick <>
    cursorPos: editor.getCursorPosition()
    polishedCode: trimTrailingSpaces(editor.getValue())
    editor.setValue polishedCode
    editor.moveCursorToPosition(cursorPos)
    editor.clearSelection()
    if not client.browser.isTouch
        editor.focus()
    if currentFilePath ≠ null
        try
            web.jsonPost("/svc/file/write", {
                path: currentFilePath
                content: polishedCode
            })'wait
            dirty: false

ui.root
.setBackgroundPaint("rgb(39,40,34)")
.setPaint("rgb(240,240,240)")
.add(newScene)

Date.Observer(-- dirty).onUpdate(--
    saveButton.setBackgroundPaint(dirty ? "rgb(192,0,64)" | "rgba(0,0,0,0)")
)
Date.Observer(-- fileText.getText()).onUpdate(e ->
    document.title: e.value
)

refresh: --
    try
        path: location.hash.startsWith("#/") ? decodeURIComponent(location.hash.substr(1)) | "/"
        files: web.jsonPost("/svc/files", path)'wait.body
        currentDirectory: path
        dirText.setText path
        currentFilePath: null
        fileText.setText "(no file)"
        filesStack.empty()
        files.forEach file ->
            text: ui.Text(file.name)
            text.onClick <>
                if file.isDirectory
                    showFiles(file.path)
                else
                    try
                        mode: match extname(file.name)
                            ".fus"    ? "fus"
                            ".js"     ? "javascript"
                            ".coffee" ? "coffee"
                            ".cpp",
                            ".c",
                            ".cc",
                            ".h",
                            ".hh",
                            ".hpp"    ? "c_cpp"
                            ".css"    ? "css"
                            ".html",
                            ".htm",
                            ".xhtml"  ? "html"
                            ".json"   ? "json"
                            ".svg"    ? "svg"
                            ".xml"    ? "xml"
                            ".md"     ? "markdown"
                            |           "plain_text"
                        newSession(web.jsonPost("/svc/file/read", file.path)'wait.body, mode)
                        currentFilePath: file.path
                        fileText.setText file.name
                        if not client.browser.isTouch
                            editor.focus()
                        editor.navigateFileStart()
            text.setPointer "link"
            filesStack.add text
        newSession("", "plain_text")
client.onUriChange refresh

showFiles: path ->
    location.href: "#\(encodePath(path))"
if not location.hash.startsWith("#/")
    showFiles "/"
else
    refresh()

do --
    global.editor: ace.edit("editor")
    editor.commands.addCommands[
        {
            bindKey: "Alt-="
            exec: -- editor.insert("≠")
        }
        {
            bindKey: "Alt-,"
            exec: -- editor.insert("≤")
        }
        {
            bindKey: "Alt-."
            exec: -- editor.insert("≥")
        }
    ]
    editor.setShowPrintMargin(false)
    editor.setTheme("ace/theme/monokai_adjusted")
    newSession("", "plain_text")
    editor.focus()
    editor.navigateFileEnd()
    width: ""
    height: ""
    element: document.getElementById("editor")
    setInterval(--
        style: getComputedStyle(element)
        if style.width ≠ width or style.height ≠ height
            editor.resize()
            width: style.width
            height: style.height
    , 500)
